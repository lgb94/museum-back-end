{
  "GET /api": {
    "description": "Gives a JSON representation of available endpoints"
  },
  "GET /api/users": {
    "description": "Gives an array of all users currently stored in Database",
    "Queries": [],
    "exampleResponse": {
      "users": [
        {
          "user_id": 1,
          "username": "username001",
          "email": "username001@email.com",
          "password": "039809230r9j203mrdfm023rkmwofmq0mq03kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "GET /api/users/:user_id": {
    "description": "Searches the database for a given user id and returns user info in case of a match",
    "Queries": [],
    "exampleResponse": {
      "users": [
        {
          "user_id": 1,
          "username": "username001",
          "email": "username001@email.com",
          "password": "039809230r9j203mrdfm023rkmwofmq0mq03kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "GET /api/users/email/:email": {
    "description": "Searches the database for a given email and returns user info in case of a match",
    "Queries": [],
    "exampleResponse": {
      "users": [
        {
          "user_id": 1,
          "username": "username001",
          "email": "username001@email.com",
          "password": "039809230r9j203mrdfm023rkmwofmq0mq03kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "POST /api/users/login": {
    "description": "Takes a request body for an email and password and responds with user information on key 'user' if email and password match that of user in DB. Password is hashed in database - request takes unhashed password.",
    "Queries": [],
    "exampleResponse": {
      "user": [
        {
          "user_id": 1,
          "username": "username001",
          "email": "username001@email.com",
          "password": "039809230r9j203mrdfm023rkmwofmq0mq03kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {
      "email" : "username001@email.com",
      "password" : "password123"
    }
  },
  "GET /api/users/username/:username": {
    "description": "Searches the database for a given username and returns user info in case of a match",
    "Queries": [],
    "exampleResponse": {
      "users": [
        {
          "user_id": 1,
          "username": "username001",
          "email": "username001@email.com",
          "password": "039809230r9j203mrdfm023rkmwofmq0mq03kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "POST /api/users": {
    "description": "Adds a new user to the database given the necessary request body info - encrypts password on entry. Returns that new user database entry on a key 'user'.",
    "Queries": [],
    "exampleResponse": {
      "user": [
        {
          "user_id": 2,
          "username": "username002",
          "email": "username002@email.com",
          "password": "039809230r9j469mrdfm023rkmwofmq0mq09kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {
      "username": "user002",
      "email": "user002@email.com",
      "password": "password1000"
    }
  },
  "PATCH /api/users/:user_id": {
    "description": "Patches user information for given Id to update username, email or password with new info in database. Request body requires one AND ONLY ONE of the following keys - new_username, new_email, new_password. Passwords are hashed before storing. Returns that updated users information on a key 'user'",
    "Queries": [],
    "exampleResponse": {
      "user": [
        {
          "user_id": 2,
          "username": "RandyJackson",
          "email": "username002@email.com",
          "password": "039809230r9j469mrdfm023rkmwofmq0mq09kfrgsdfgsq"
        }
      ]
    },
    "requestBodyFormat": {
      "new_username": "RandyJackson"
    }
  },
  "DELETE /api/users/:user_id": {
    "description": "Deletes users database entry with given user_id - responds with empty object signalling successful removal. ",
    "Queries": [],
    "exampleResponse": {},
    "requestBodyFormat": {}
  },
  "GET /api/objects": {
    "description": "Gives an array of ALL objects stored in the database, taken and collated from museum apis. Takes queries to the request url for each row of objects information - for example: /objects?culture=Greek. Can take multiple queries at one time - for example: /objects?culture=greek&classification=Sculpture. Queries for rows with numerical values can take an operator value for further refining (<,>) - for example /objects?object_begin_date=0&object_being_date_operator=< searches for objects with a begin date less than 0. Operator queries without queries to respective rows will have no effect. Results are paginated for large amount of data being available to request, with default values if left unspecified. Responds with multiple keys of information on a key of 'results': 'objects' - returned object information array, 'totalRecords' - the total amount of results for request, 'totalPages' - the number of pages the request results are paginated into, 'currentPage' - the results page requested, 'limit' - the limit on the amount of results per page. By default, results are sorted by object_id in ascending order (order direction requires a specified sortBy value, and must be given in lowercase - for example 'sortBy=object_begin_date&sortOrder=desc'",
    "Queries": [
      "title",
      "culture",
      "period",
      "medium",
      "classification",
      "museum_dataset",
      "object_begin_date",
      "object_begin_date_operator",
      "object_end_date",
      "object_end_date_operator",
      "sortBy",
      "sortOrder",
      "limit",
      "page"
    ],
    "exampleResponse": {
      "results": {
        "objects": [
          {
            "object_id": 1,
            "title": "'Object A'",
            "culture": "'Greek'",
            "period": "'Classical Period'",
            "object_begin_date": -200,
            "object_end_date": -100,
            "medium": "'Marble'",
            "classification": "'Sculpture'",
            "primary_image": "'https://example.com/imageA.jpg'",
            "object_url": "'https://example.com/objectA'",
            "museum_dataset": "'met'"
          }
        ],
        "totalRecords": 1,
        "totalPages": 1,
        "currentPage": 1,
        " limit": 10
      }
    },
    "requestBodyFormat": {}
  },
  "GET /api/objects/:object_id": {
    "description" : "Returns single object information from given object id, info returned on a key of 'object'",
    "queries": [],
    "exampleResponse":{
      "object": {}
    },
    "requestBodyFormat":{}
  },
  "GET /api/exhibits/": {
    "description": "Returns database entries for ALL usermade exhibits. On a key of 'exhibits' will be an array of objects with information for each exhibit. May have to be paginated in future if amount of user-made exhibits grows large - example imagines there to be only one user made exhibit.",
    "Queries": [],
    "exampleResponse": {
      "exhibits": [
        {
          "exhibit_id": 1,
          "title": "'Sculpture of the Ancient World'",
          "description": "'A collection showcasing sculptures from various ancient cultures.'",
          "curator_id": 1,
          "created_at": "'2024-10-16T16:08:20.248Z'",
          "curator_username": "'user001'",
          "object_count": 2
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "GET /api/exhibits/:exhibit_id": {
    "description": "Returns database entries for usermade exhibit matching given exhibit_id. Information returned on a key of 'exhibit'.",
    "Queries": [],
    "exampleResponse": {
      "exhibit": [
        {
          "exhibit_id": 1,
          "title": "'Sculpture of the Ancient World'",
          "description": "'A collection showcasing sculptures from various ancient cultures.'",
          "curator_id": 1,
          "created_at": "'2024-10-16T16:08:20.248Z'",
          "curator_username": "'user001'",
          "object_count": 2
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "GET /api/exhibits/user/:user_id": {
    "description": "Returns database entries for usermade exhibits matching given user_id. This user_id is reflected in results as 'curator_id' field, with username matching id given as 'curator_username' Information returned on a key of 'exhibits'.",
    "Queries": [],
    "exampleResponse": {
      "exhibits": [
        {
          "exhibit_id": 1,
          "title": "'Sculpture of the Ancient World'",
          "description": "'A collection showcasing sculptures from various ancient cultures.'",
          "curator_id": 1,
          "created_at": "'2024-10-16T16:16:29.921Z'",
          "curator_username": "'user001'",
          "object_count": 2
        },
        {
          "exhibit_id": 2,
          "title": "'Modern Art in Focus'",
          "description": "'Exploring the innovations in modern art through various artists.'",
          "curator_id": 1,
          "created_at": "'2024-10-16T16:16:29.921Z'",
          "curator_username": "'user001'",
          "object_count": 3
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "POST /api/exhibits": {
    "description": "Posts a new user-made exhibit given a title, description and user_id on request body - title and description will be given default values for empty key values. Responds with newly created exhibit object on key 'exhibit'",
    "Queries": [],
    "exampleResponse": {
      "exhibit": {
        "exhibit_id": 4,
        "title": "new exhibit",
        "description": "cool stuff i like",
        "curator_id": 3,
        "created_at": "2024-10-16T16:36:30.710Z",
        "object_count": 0
      }
    },
    "requestBodyFormat": {
      "title": "new exhibit",
      "description": "cool stuff i like",
      "user_id": 3
    }
  },
  "PATCH /api/exhibits/:exhibit_id": {
    "description": "Patches a user made exhibit according to exhibit_id given in request, requires user_id for verification in request body. Request body takes keys 'new_title', 'new_description' - can accept one or both at once. Returns updated exhibit entry on success.",
    "Queries": [],
    "exampleResponse": {
      "exhibit": {
        "exhibit_id": 4,
        "title": "the best exhibit ever",
        "description": "look how truly awesome these are",
        "curator_id": 3,
        "created_at": "2024-10-16T16:36:30.710Z",
        "object_count": 0
      }
    },
    "requestBodyFormat": {
      "new_title": "the best exhibit ever",
      "new_description": "look how truly awesome these are",
      "user_id": 3
    }
  },
  "DELETE /api/exhibits/:exhibit_id": {
    "description": "Deletes user-made exhibit with given exhibit_id - responds with empty object upon success.",
    "Queries": [],
    "exampleResponse": {},
    "requestBodyFormat": {}
  },
  "GET /api/exhibitobjects/:exhibit_id": {
    "description": "Returns database entries for objects within user-made exhibit for given exhibit_id. Objects within exhibits have all the information for that object returned alongside exhibit-specific information. Information returned as an array of objects on a key of 'objects'.",
    "Queries": [],
    "exampleResponse": {
      "objects": [
        {
          "object_position": 1,
          "object_id": 1,
          "title": "Object A",
          "culture": "Greek",
          "period": "Classical Period",
          "object_begin_date": -200,
          "object_end_date": -100,
          "medium": "Marble",
          "classification": "Sculpture",
          "primary_image": "https://example.com/imageA.jpg",
          "object_url": "https://example.com/objectA",
          "museum_dataset": "met"
        },
        {
          "object_position": 2,
          "object_id": 2,
          "title": "Object B",
          "culture": "Greek",
          "period": "Classical Period",
          "object_begin_date": -400,
          "object_end_date": -300,
          "medium": "Bronze",
          "classification": "Figure",
          "primary_image": "https://example.com/imageB.jpg",
          "object_url": "https://example.com/objectB",
          "museum_dataset": "harvard"
        }
      ]
    },
    "requestBodyFormat": {}
  },
  "GET /api/exhibitobjects/objects/:exhibit_object_id": {
    "description": "Returns database entries for single object entry within user-made exhibits for given exhibit_object_id. Objects within exhibits have all the information for that object returned alongside their exhibit-specific information. Information returned on a key of 'object'.",
    "Queries": [],
    "exampleResponse": {
      "object": {
        "exhibit_object_id": 1,
        "exhibit_id": 1,
        "object_id": 1,
        "object_position": 1,
        "title": "Object A",
        "culture": "Greek",
        "period": "Classical Period",
        "object_begin_date": -200,
        "object_end_date": -100,
        "medium": "Marble",
        "classification": "Sculpture",
        "primary_image": "https://example.com/imageA.jpg",
        "object_url": "https://example.com/objectA",
        "museum_dataset": "met"
      }
    },
    "requestBodyFormat": {}
  },
  "POST /api/exhibitobjects": {
    "description": "Takes a request body to enter a new object into the exhibit_objects table. Requires exhibit_id of exhibit to be added to as well as object_id of object to be added. Responds with new objects entry into exhibit_objects table on a key 'exhibitObject' - does not return all that objects information (only the specific exhibit information)",
    "Queries": [],
    "exampleResponse": {
      "exhibitObject": {
        "exhibit_object_id": 6,
        "exhibit_id": 2,
        "object_id": 4,
        "object_position": 4
      }
    },
    "requestBodyFormat": {
      "exhibit_id": 2,
      "object_id": 4
    }
  },
  "PATCH /api/exhibitobjects/:exhibit_id": {
    "description": "Takes a request body to patch object positions within a user made exhibit (specified by id in request URL) Requires user_id to match curator_id for given exhibit to verify. POSITION UPDATES IN REQUEST BODY MUST BE GIVEN FOR EVERY OBJECT POSITION WITHIN THE EXHIBIT - if an exhibit has three objects, a position update field is required for each object (even if its position is to remain unchanged). position_updates key requires an object as its value, with keys of each objects exhibit_object_id, their values as their new positions within the exhibit. For example - say an exhibit has two objects - their exhibit_object_ids are 1 and 7. To place id 1 in position 2 and id 7 in position 1, position_updates key would have value {1:2,7:1}. Responds with updated objects array on key updatedExhibitObjects, sorted by their new positions in ascending order.",
    "Queries": [],
    "exampleResponse": {
      "updatedExhibitObjects": [
        {
          "exhibit_object_id": 4,
          "exhibit_id": 2,
          "object_id": 3,
          "object_position": 1
        },
        {
          "exhibit_object_id": 5,
          "exhibit_id": 2,
          "object_id": 2,
          "object_position": 2
        },
        {
          "exhibit_object_id": 3,
          "exhibit_id": 2,
          "object_id": 1,
          "object_position": 3
        }
      ]
    },
    "requestBodyFormat": {
      "user_id": 1,
      "position_updates": {
        "3": 3,
        "4": 1,
        "5": 2
      }
    }
  },
  "DELETE /api/exhibitobjects/:exhibit_object_id": {
    "description": "Deletes exhibit object entry from user-made exhibit matching given exhibit_object_id in request URL - responds with empty object upon success.",
    "Queries": [],
    "exampleResponse": {},
    "requestBodyFormat": {}
  }
}
